from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from keyboards import *
from aiogram.fsm.context import FSMContext
from project_with_properties import ProjectWithProperties
from validate_fields import validate_field, validate_price, generate_text_by_projects
from parse import parsing


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–±—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=greeting_kb
    )

@router.message(F.text.in_(["/search", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã"]))
async def get_projects(message: Message, state: FSMContext):
    await message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä:  –¥–∏–∑–∞–π–Ω–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ Python, –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π", reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(ProjectWithProperties.name)


@router.message(ProjectWithProperties.name)
async def get_name_project(message: Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer("üí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞:\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç 5000 –¥–æ 15000 —Ä—É–±, –∏–ª–∏ –æ—Ç 100 –¥–æ 300 –¥–æ–ª/–µ–≤—Ä", reply_markup=skip_kb_builder_price)
    
    await state.set_state(ProjectWithProperties.price)


@router.message(ProjectWithProperties.price)
async def get_price_project(message: Message, state: FSMContext, categories: list[str]):
    
    if await validate_price(message.text):
        await state.update_data(price=message.text)
        await message.answer("üé® –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=await get_categories(categories))
        await message.answer("–ò–ª–∏, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤–∞–∂–Ω–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\" üëá", reply_markup=skip_kb_builder_cat)
        await state.set_state(ProjectWithProperties.category)
    else:
        await message.reply("ü§î –£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Äî–æ—Ç 1000 –¥–æ 2000 —Ä—É–±\n‚Äî –æ—Ç 50 –¥–æ 100 –¥–æ–ª\n‚Äî –æ—Ç 40 –¥–æ 70 –µ–≤—Ä", 
                            reply_markup=skip_kb_builder_price)
        await state.set_state(ProjectWithProperties.price)



@router.message(ProjectWithProperties.category)
async def get_category_project(message: Message, state: FSMContext, categories: list[str]):

    if await validate_field(message.text.strip(), categories):
        await state.update_data(category=message.text)
        await message.answer("üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:", reply_markup=dates_kb)
        await message.answer("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\", –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è üëá", reply_markup=skip_kb_builder_date)
        await state.set_state(ProjectWithProperties.date)
    else:
        await message.reply("üßê –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:\n"
        "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.", reply_markup=skip_kb_builder_cat)
        await state.set_state(ProjectWithProperties.category)


@router.message(ProjectWithProperties.date)
async def get_date_project(message: Message, state: FSMContext, dates: list[str]):
    if await validate_field(message.text.strip(), dates):
        await state.update_data(date=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–π—Ç–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ProjectWithProperties.amount)
    else:
        await message.reply("ü§î –•–º, —Ç–∞–∫–æ–π –æ–ø—Ü–∏–∏ –¥–ª—è –¥–∞—Ç—ã –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=skip_kb_builder_date)
        await state.set_state(ProjectWithProperties.date)

@router.message(ProjectWithProperties.amount)
async def get_amount_projects(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(amount=int(message.text))
        request_data = await state.get_data()
        await message.reply(
                    f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –ò–¥–µ—Ç –ø–æ–∏—Å–∫ {request_data['amount']} –ø—Ä–æ–µ–∫—Ç–æ–≤... ‚è≥\n\n"
                    f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å:\n"
                    f"‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ: {request_data.get('name')}\n"
                    f"üí∞ –¶–µ–Ω–∞: {request_data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üé® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request_data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üìÖ –î–∞—Ç–∞: {request_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
                ,reply_markup=ReplyKeyboardRemove())
        await state.clear()

        projects = await parsing(request_data)
        if projects != "–ù–∏—á–µ–≥–æ" and projects != None:
            async for text in generate_text_by_projects(projects):
                await message.answer(text=text, parse_mode="HTML")
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É\n/search")

    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await state.set_state(ProjectWithProperties.amount)


@router.callback_query(F.data.in_(["skip_price", "skip_category", "skip_date"]))
async def skip_handler(callback: CallbackQuery, state: FSMContext, categories: list[str]):
    await callback.answer()
    
    try:
        await callback.message.delete()
    except Exception:
        pass 
    

    if callback.data == "skip_price":
        await state.update_data(price=None)
        msg = await callback.message.answer(
            "üí∏ –¶–µ–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!\nüé® –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞:",
            reply_markup=await get_categories(categories)
        )
        await msg.answer(
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\", –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤–∞–∂–Ω–∞ üëá",
            reply_markup=skip_kb_builder_cat
        )
        await state.set_state(ProjectWithProperties.category)

    elif callback.data == "skip_category":
        await state.update_data(category=None)
        msg = await callback.message.answer(
            "üé® –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞. –•–æ—Ä–æ—à–æ!\nüìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=dates_kb
        )
        await msg.answer(
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\", –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è üëá",
            reply_markup=skip_kb_builder_date
        )
        await state.set_state(ProjectWithProperties.date)

    elif callback.data == "skip_date":
        await state.update_data(date=None)
        msg = await callback.message.answer(
            "üìÖ–î–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –•–æ—Ä–æ—à–æ!\n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–π—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(ProjectWithProperties.amount)


